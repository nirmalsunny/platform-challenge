name: Build, Push and Deploy

on:
  push:
    branches: [ main ]

env:
  TF_VERSION: 1.3.7

jobs:
  build-and-push-dev:
    name: Build and Push Image - Dev
    runs-on: ubuntu-latest
    steps:
    
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}-dev
        IMAGE_TAG: ${{ github.run_id }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
   
  build-and-push-prod:
    name: Build and Push Image - Production
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}-prod
        IMAGE_TAG: ${{ github.run_id }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-dev:
    name: Deploy Dev Environment
    needs: build-and-push-dev
    environment:
      name: dev
      url: ${{ steps.apply-dev.outputs.web_endpoint }}
    runs-on: ubuntu-latest
    steps:
    
      - uses: actions/checkout@v3
        name: Checkout source code

      - name: Setup AWS credentials
        run: |
          mkdir ~/.aws
          echo -e "[default]\naws_access_key_id=${{ secrets.TF_USER_AWS_KEY }}\naws_secret_access_key=${{ secrets.TF_USER_AWS_SECRET }}\n" >> ~/.aws/credentials

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        working-directory: "infra/envs/dev/ecs"
        run: |
          terraform fmt -check -diff -recursive && echo -e "\e[32mterraform fmt succeeded!\e[0m" || (echo -e "\e[31mterraform fmt failed! Install the precommit hooks!\e[0m" && exit 1)

      - name: Terraform Init
        working-directory: "infra/envs/dev/ecs"
        run: terraform init

      - name: Terraform Apply
        id: apply-dev
        working-directory: "infra/envs/dev/ecs"
        env:
          TF_IN_AUTOMATION: 1
        run: terraform apply -auto-approve -input=false -compact-warnings -var="release_version=${{ github.run_id }}"
  
  set-env-url-dev:
    runs-on: ubuntu-latest
    environment:
      name: dev
      url: ${{ steps.apply-dev.outputs.web_endpoint }}
  
  deploy-prod:
    name: Deploy Production Environment
    needs: build-and-push-prod
    environment:
      name: prod
      url: ${{ steps.apply-prod.outputs.web_endpoint }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout source code

      - name: Setup AWS credentials
        run: |
          mkdir ~/.aws
          echo -e "[default]\naws_access_key_id=${{ secrets.TF_USER_AWS_KEY }}\naws_secret_access_key=${{ secrets.TF_USER_AWS_SECRET }}\n" >> ~/.aws/credentials

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        working-directory: "infra/envs/prod/ecs"
        run: |
          terraform fmt -check -diff -recursive && echo -e "\e[32mterraform fmt succeeded!\e[0m" || (echo -e "\e[31mterraform fmt failed! Install the precommit hooks!\e[0m" && exit 1)

      - name: Terraform Init
        working-directory: "infra/envs/prod/ecs"
        run: terraform init

      - name: Terraform Apply
        id: apply-prod
        working-directory: "infra/envs/prod/ecs"
        env:
          TF_IN_AUTOMATION: 1
        run: terraform apply -auto-approve -input=false -compact-warnings  -var="release_version=${{ github.run_id }}"
 
  set-env-url-prod:
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: ${{ steps.apply-prod.outputs.web_endpoint }}